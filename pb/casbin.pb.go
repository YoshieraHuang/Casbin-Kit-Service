// Code generated by protoc-gen-go. DO NOT EDIT.
// source: casbin.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewEnforcerRequest struct {
	ModelText            string   `protobuf:"bytes,1,opt,name=modelText,proto3" json:"modelText,omitempty"`
	AdapterHandler       int32    `protobuf:"varint,2,opt,name=adapterHandler,proto3" json:"adapterHandler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewEnforcerRequest) Reset()         { *m = NewEnforcerRequest{} }
func (m *NewEnforcerRequest) String() string { return proto.CompactTextString(m) }
func (*NewEnforcerRequest) ProtoMessage()    {}
func (*NewEnforcerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{0}
}

func (m *NewEnforcerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEnforcerRequest.Unmarshal(m, b)
}
func (m *NewEnforcerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEnforcerRequest.Marshal(b, m, deterministic)
}
func (m *NewEnforcerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEnforcerRequest.Merge(m, src)
}
func (m *NewEnforcerRequest) XXX_Size() int {
	return xxx_messageInfo_NewEnforcerRequest.Size(m)
}
func (m *NewEnforcerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEnforcerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewEnforcerRequest proto.InternalMessageInfo

func (m *NewEnforcerRequest) GetModelText() string {
	if m != nil {
		return m.ModelText
	}
	return ""
}

func (m *NewEnforcerRequest) GetAdapterHandler() int32 {
	if m != nil {
		return m.AdapterHandler
	}
	return 0
}

type NewEnforcerResponse struct {
	Handler              int32    `protobuf:"varint,1,opt,name=handler,proto3" json:"handler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewEnforcerResponse) Reset()         { *m = NewEnforcerResponse{} }
func (m *NewEnforcerResponse) String() string { return proto.CompactTextString(m) }
func (*NewEnforcerResponse) ProtoMessage()    {}
func (*NewEnforcerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{1}
}

func (m *NewEnforcerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewEnforcerResponse.Unmarshal(m, b)
}
func (m *NewEnforcerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewEnforcerResponse.Marshal(b, m, deterministic)
}
func (m *NewEnforcerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEnforcerResponse.Merge(m, src)
}
func (m *NewEnforcerResponse) XXX_Size() int {
	return xxx_messageInfo_NewEnforcerResponse.Size(m)
}
func (m *NewEnforcerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEnforcerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewEnforcerResponse proto.InternalMessageInfo

func (m *NewEnforcerResponse) GetHandler() int32 {
	if m != nil {
		return m.Handler
	}
	return 0
}

type NewAdapterRequest struct {
	AdapterName          string   `protobuf:"bytes,1,opt,name=adapterName,proto3" json:"adapterName,omitempty"`
	DriverName           string   `protobuf:"bytes,2,opt,name=driverName,proto3" json:"driverName,omitempty"`
	ConnectString        string   `protobuf:"bytes,3,opt,name=connectString,proto3" json:"connectString,omitempty"`
	DbSpecified          bool     `protobuf:"varint,4,opt,name=dbSpecified,proto3" json:"dbSpecified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewAdapterRequest) Reset()         { *m = NewAdapterRequest{} }
func (m *NewAdapterRequest) String() string { return proto.CompactTextString(m) }
func (*NewAdapterRequest) ProtoMessage()    {}
func (*NewAdapterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{2}
}

func (m *NewAdapterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAdapterRequest.Unmarshal(m, b)
}
func (m *NewAdapterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAdapterRequest.Marshal(b, m, deterministic)
}
func (m *NewAdapterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAdapterRequest.Merge(m, src)
}
func (m *NewAdapterRequest) XXX_Size() int {
	return xxx_messageInfo_NewAdapterRequest.Size(m)
}
func (m *NewAdapterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAdapterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAdapterRequest proto.InternalMessageInfo

func (m *NewAdapterRequest) GetAdapterName() string {
	if m != nil {
		return m.AdapterName
	}
	return ""
}

func (m *NewAdapterRequest) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *NewAdapterRequest) GetConnectString() string {
	if m != nil {
		return m.ConnectString
	}
	return ""
}

func (m *NewAdapterRequest) GetDbSpecified() bool {
	if m != nil {
		return m.DbSpecified
	}
	return false
}

type NewAdapterResponse struct {
	Handler              int32    `protobuf:"varint,1,opt,name=handler,proto3" json:"handler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewAdapterResponse) Reset()         { *m = NewAdapterResponse{} }
func (m *NewAdapterResponse) String() string { return proto.CompactTextString(m) }
func (*NewAdapterResponse) ProtoMessage()    {}
func (*NewAdapterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{3}
}

func (m *NewAdapterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAdapterResponse.Unmarshal(m, b)
}
func (m *NewAdapterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAdapterResponse.Marshal(b, m, deterministic)
}
func (m *NewAdapterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAdapterResponse.Merge(m, src)
}
func (m *NewAdapterResponse) XXX_Size() int {
	return xxx_messageInfo_NewAdapterResponse.Size(m)
}
func (m *NewAdapterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAdapterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewAdapterResponse proto.InternalMessageInfo

func (m *NewAdapterResponse) GetHandler() int32 {
	if m != nil {
		return m.Handler
	}
	return 0
}

type EnforceRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	Params               []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnforceRequest) Reset()         { *m = EnforceRequest{} }
func (m *EnforceRequest) String() string { return proto.CompactTextString(m) }
func (*EnforceRequest) ProtoMessage()    {}
func (*EnforceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{4}
}

func (m *EnforceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnforceRequest.Unmarshal(m, b)
}
func (m *EnforceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnforceRequest.Marshal(b, m, deterministic)
}
func (m *EnforceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnforceRequest.Merge(m, src)
}
func (m *EnforceRequest) XXX_Size() int {
	return xxx_messageInfo_EnforceRequest.Size(m)
}
func (m *EnforceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnforceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnforceRequest proto.InternalMessageInfo

func (m *EnforceRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *EnforceRequest) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type BoolResponse struct {
	Res                  bool     `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolResponse) Reset()         { *m = BoolResponse{} }
func (m *BoolResponse) String() string { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()    {}
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{5}
}

func (m *BoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolResponse.Unmarshal(m, b)
}
func (m *BoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolResponse.Marshal(b, m, deterministic)
}
func (m *BoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolResponse.Merge(m, src)
}
func (m *BoolResponse) XXX_Size() int {
	return xxx_messageInfo_BoolResponse.Size(m)
}
func (m *BoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BoolResponse proto.InternalMessageInfo

func (m *BoolResponse) GetRes() bool {
	if m != nil {
		return m.Res
	}
	return false
}

type EmptyRequest struct {
	Handler              int32    `protobuf:"varint,1,opt,name=handler,proto3" json:"handler,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{6}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

func (m *EmptyRequest) GetHandler() int32 {
	if m != nil {
		return m.Handler
	}
	return 0
}

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{7}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type PolicyRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	PType                string   `protobuf:"bytes,2,opt,name=pType,proto3" json:"pType,omitempty"`
	Params               []string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyRequest) Reset()         { *m = PolicyRequest{} }
func (m *PolicyRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyRequest) ProtoMessage()    {}
func (*PolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{8}
}

func (m *PolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRequest.Unmarshal(m, b)
}
func (m *PolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRequest.Marshal(b, m, deterministic)
}
func (m *PolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRequest.Merge(m, src)
}
func (m *PolicyRequest) XXX_Size() int {
	return xxx_messageInfo_PolicyRequest.Size(m)
}
func (m *PolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRequest proto.InternalMessageInfo

func (m *PolicyRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *PolicyRequest) GetPType() string {
	if m != nil {
		return m.PType
	}
	return ""
}

func (m *PolicyRequest) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type SimpleGetRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	PType                string   `protobuf:"bytes,2,opt,name=pType,proto3" json:"pType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleGetRequest) Reset()         { *m = SimpleGetRequest{} }
func (m *SimpleGetRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleGetRequest) ProtoMessage()    {}
func (*SimpleGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{9}
}

func (m *SimpleGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleGetRequest.Unmarshal(m, b)
}
func (m *SimpleGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleGetRequest.Marshal(b, m, deterministic)
}
func (m *SimpleGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleGetRequest.Merge(m, src)
}
func (m *SimpleGetRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleGetRequest.Size(m)
}
func (m *SimpleGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleGetRequest proto.InternalMessageInfo

func (m *SimpleGetRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *SimpleGetRequest) GetPType() string {
	if m != nil {
		return m.PType
	}
	return ""
}

type ArrayResponse struct {
	Array                []string `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayResponse) Reset()         { *m = ArrayResponse{} }
func (m *ArrayResponse) String() string { return proto.CompactTextString(m) }
func (*ArrayResponse) ProtoMessage()    {}
func (*ArrayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{10}
}

func (m *ArrayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayResponse.Unmarshal(m, b)
}
func (m *ArrayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayResponse.Marshal(b, m, deterministic)
}
func (m *ArrayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayResponse.Merge(m, src)
}
func (m *ArrayResponse) XXX_Size() int {
	return xxx_messageInfo_ArrayResponse.Size(m)
}
func (m *ArrayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayResponse proto.InternalMessageInfo

func (m *ArrayResponse) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

type FilteredPolicyRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	PType                string   `protobuf:"bytes,2,opt,name=pType,proto3" json:"pType,omitempty"`
	FieldIndex           int32    `protobuf:"varint,3,opt,name=fieldIndex,proto3" json:"fieldIndex,omitempty"`
	FieldValues          []string `protobuf:"bytes,4,rep,name=fieldValues,proto3" json:"fieldValues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilteredPolicyRequest) Reset()         { *m = FilteredPolicyRequest{} }
func (m *FilteredPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*FilteredPolicyRequest) ProtoMessage()    {}
func (*FilteredPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{11}
}

func (m *FilteredPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilteredPolicyRequest.Unmarshal(m, b)
}
func (m *FilteredPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilteredPolicyRequest.Marshal(b, m, deterministic)
}
func (m *FilteredPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilteredPolicyRequest.Merge(m, src)
}
func (m *FilteredPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_FilteredPolicyRequest.Size(m)
}
func (m *FilteredPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilteredPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilteredPolicyRequest proto.InternalMessageInfo

func (m *FilteredPolicyRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *FilteredPolicyRequest) GetPType() string {
	if m != nil {
		return m.PType
	}
	return ""
}

func (m *FilteredPolicyRequest) GetFieldIndex() int32 {
	if m != nil {
		return m.FieldIndex
	}
	return 0
}

func (m *FilteredPolicyRequest) GetFieldValues() []string {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

type UserRoleRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Role                 string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRoleRequest) Reset()         { *m = UserRoleRequest{} }
func (m *UserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*UserRoleRequest) ProtoMessage()    {}
func (*UserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{12}
}

func (m *UserRoleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRoleRequest.Unmarshal(m, b)
}
func (m *UserRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRoleRequest.Marshal(b, m, deterministic)
}
func (m *UserRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRoleRequest.Merge(m, src)
}
func (m *UserRoleRequest) XXX_Size() int {
	return xxx_messageInfo_UserRoleRequest.Size(m)
}
func (m *UserRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRoleRequest proto.InternalMessageInfo

func (m *UserRoleRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *UserRoleRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type PermissionRequest struct {
	EnforcerHandler      int32    `protobuf:"varint,1,opt,name=enforcerHandler,proto3" json:"enforcerHandler,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Permission           []string `protobuf:"bytes,3,rep,name=permission,proto3" json:"permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermissionRequest) Reset()         { *m = PermissionRequest{} }
func (m *PermissionRequest) String() string { return proto.CompactTextString(m) }
func (*PermissionRequest) ProtoMessage()    {}
func (*PermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{13}
}

func (m *PermissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionRequest.Unmarshal(m, b)
}
func (m *PermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionRequest.Marshal(b, m, deterministic)
}
func (m *PermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionRequest.Merge(m, src)
}
func (m *PermissionRequest) XXX_Size() int {
	return xxx_messageInfo_PermissionRequest.Size(m)
}
func (m *PermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionRequest proto.InternalMessageInfo

func (m *PermissionRequest) GetEnforcerHandler() int32 {
	if m != nil {
		return m.EnforcerHandler
	}
	return 0
}

func (m *PermissionRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PermissionRequest) GetPermission() []string {
	if m != nil {
		return m.Permission
	}
	return nil
}

type Array2DResponse struct {
	D2                   []*Array2DResponseD `protobuf:"bytes,1,rep,name=d2,proto3" json:"d2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Array2DResponse) Reset()         { *m = Array2DResponse{} }
func (m *Array2DResponse) String() string { return proto.CompactTextString(m) }
func (*Array2DResponse) ProtoMessage()    {}
func (*Array2DResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{14}
}

func (m *Array2DResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Array2DResponse.Unmarshal(m, b)
}
func (m *Array2DResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Array2DResponse.Marshal(b, m, deterministic)
}
func (m *Array2DResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Array2DResponse.Merge(m, src)
}
func (m *Array2DResponse) XXX_Size() int {
	return xxx_messageInfo_Array2DResponse.Size(m)
}
func (m *Array2DResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Array2DResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Array2DResponse proto.InternalMessageInfo

func (m *Array2DResponse) GetD2() []*Array2DResponseD {
	if m != nil {
		return m.D2
	}
	return nil
}

type Array2DResponseD struct {
	D1                   []string `protobuf:"bytes,1,rep,name=d1,proto3" json:"d1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Array2DResponseD) Reset()         { *m = Array2DResponseD{} }
func (m *Array2DResponseD) String() string { return proto.CompactTextString(m) }
func (*Array2DResponseD) ProtoMessage()    {}
func (*Array2DResponseD) Descriptor() ([]byte, []int) {
	return fileDescriptor_df0f85ba9164bca5, []int{14, 0}
}

func (m *Array2DResponseD) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Array2DResponseD.Unmarshal(m, b)
}
func (m *Array2DResponseD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Array2DResponseD.Marshal(b, m, deterministic)
}
func (m *Array2DResponseD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Array2DResponseD.Merge(m, src)
}
func (m *Array2DResponseD) XXX_Size() int {
	return xxx_messageInfo_Array2DResponseD.Size(m)
}
func (m *Array2DResponseD) XXX_DiscardUnknown() {
	xxx_messageInfo_Array2DResponseD.DiscardUnknown(m)
}

var xxx_messageInfo_Array2DResponseD proto.InternalMessageInfo

func (m *Array2DResponseD) GetD1() []string {
	if m != nil {
		return m.D1
	}
	return nil
}

func init() {
	proto.RegisterType((*NewEnforcerRequest)(nil), "pb.NewEnforcerRequest")
	proto.RegisterType((*NewEnforcerResponse)(nil), "pb.NewEnforcerResponse")
	proto.RegisterType((*NewAdapterRequest)(nil), "pb.NewAdapterRequest")
	proto.RegisterType((*NewAdapterResponse)(nil), "pb.NewAdapterResponse")
	proto.RegisterType((*EnforceRequest)(nil), "pb.EnforceRequest")
	proto.RegisterType((*BoolResponse)(nil), "pb.BoolResponse")
	proto.RegisterType((*EmptyRequest)(nil), "pb.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "pb.EmptyResponse")
	proto.RegisterType((*PolicyRequest)(nil), "pb.PolicyRequest")
	proto.RegisterType((*SimpleGetRequest)(nil), "pb.SimpleGetRequest")
	proto.RegisterType((*ArrayResponse)(nil), "pb.ArrayResponse")
	proto.RegisterType((*FilteredPolicyRequest)(nil), "pb.FilteredPolicyRequest")
	proto.RegisterType((*UserRoleRequest)(nil), "pb.UserRoleRequest")
	proto.RegisterType((*PermissionRequest)(nil), "pb.PermissionRequest")
	proto.RegisterType((*Array2DResponse)(nil), "pb.Array2DResponse")
	proto.RegisterType((*Array2DResponseD)(nil), "pb.Array2DResponse.d")
}

func init() { proto.RegisterFile("casbin.proto", fileDescriptor_df0f85ba9164bca5) }

var fileDescriptor_df0f85ba9164bca5 = []byte{
	// 1047 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0x35, 0xe5, 0x9f, 0x44, 0x63, 0x4b, 0xb2, 0xd6, 0xb2, 0x2c, 0x0b, 0xf9, 0x0c, 0x7d, 0x44,
	0xd3, 0xea, 0x4a, 0x85, 0x95, 0xa4, 0x41, 0xd3, 0x18, 0x09, 0x15, 0x2b, 0x52, 0x82, 0xda, 0x31,
	0xa8, 0xb4, 0x17, 0xbd, 0xa3, 0xb8, 0x63, 0x97, 0x05, 0x45, 0x32, 0x24, 0x95, 0xd8, 0x8f, 0xd2,
	0x8b, 0x3e, 0x65, 0x5f, 0xa0, 0xd8, 0xe5, 0x8f, 0x97, 0xb4, 0x08, 0x8b, 0x94, 0xef, 0xb8, 0x83,
	0x39, 0x67, 0x66, 0x76, 0xcf, 0x0c, 0x97, 0x84, 0x1d, 0x5d, 0xf3, 0xa6, 0x86, 0xd5, 0x73, 0x5c,
	0xdb, 0xb7, 0x49, 0xc9, 0x99, 0xca, 0x7f, 0x00, 0x39, 0xc7, 0x6f, 0x43, 0xeb, 0xd2, 0x76, 0x75,
	0x74, 0x55, 0xfc, 0x32, 0x47, 0xcf, 0x27, 0x4f, 0xa0, 0x3c, 0xb3, 0x29, 0x9a, 0x9f, 0xf1, 0xda,
	0x6f, 0x49, 0x1d, 0xa9, 0x5b, 0x56, 0x6f, 0x0d, 0xe4, 0x7b, 0xa8, 0x6a, 0x54, 0x73, 0x7c, 0x74,
	0xc7, 0x9a, 0x45, 0x4d, 0x74, 0x5b, 0xa5, 0x8e, 0xd4, 0xdd, 0x54, 0x53, 0x56, 0xf9, 0x47, 0xd8,
	0x4b, 0x70, 0x7b, 0x8e, 0x6d, 0x79, 0x48, 0x5a, 0xf0, 0xe8, 0xcf, 0x10, 0x27, 0x71, 0x5c, 0xb4,
	0x94, 0xff, 0x91, 0xa0, 0x7e, 0x8e, 0xdf, 0x94, 0x80, 0x26, 0x4a, 0xa6, 0x03, 0xdb, 0x21, 0xf1,
	0xb9, 0x36, 0xc3, 0x30, 0x1d, 0xd1, 0x44, 0x8e, 0x00, 0xa8, 0x6b, 0x7c, 0x0d, 0x1d, 0x4a, 0xdc,
	0x41, 0xb0, 0x90, 0xef, 0xa0, 0xa2, 0xdb, 0x96, 0x85, 0xba, 0x3f, 0xf1, 0x5d, 0xc3, 0xba, 0x6a,
	0xad, 0x73, 0x97, 0xa4, 0x91, 0xc5, 0xa1, 0xd3, 0x89, 0x83, 0xba, 0x71, 0x69, 0x20, 0x6d, 0x6d,
	0x74, 0xa4, 0xee, 0x63, 0x55, 0x34, 0xc9, 0x3d, 0xbe, 0x59, 0x71, 0x7a, 0xf7, 0xd6, 0xa3, 0x42,
	0x35, 0xac, 0x3e, 0xaa, 0xa5, 0x0b, 0x35, 0x0c, 0xf7, 0x63, 0x9c, 0xc0, 0xa4, 0xcd, 0xa4, 0x09,
	0x5b, 0x8e, 0xe6, 0x6a, 0x33, 0xaf, 0x55, 0xea, 0xac, 0x77, 0xcb, 0x6a, 0xb8, 0x92, 0x3b, 0xb0,
	0x33, 0xb0, 0x6d, 0x33, 0x8e, 0xbe, 0x0b, 0xeb, 0x2e, 0x7a, 0x9c, 0xe5, 0xb1, 0xca, 0x1e, 0xe5,
	0x2e, 0xec, 0x0c, 0x67, 0x8e, 0x7f, 0x13, 0xc5, 0xcc, 0xce, 0xaf, 0x06, 0x95, 0xd0, 0x33, 0x20,
	0x93, 0xaf, 0xa0, 0x72, 0x61, 0x9b, 0x86, 0x7e, 0x93, 0x3f, 0xdf, 0x06, 0x6c, 0x3a, 0x9f, 0x6f,
	0x9c, 0x68, 0xfb, 0x83, 0x85, 0x50, 0xc5, 0x7a, 0xa2, 0x0a, 0x15, 0x76, 0x27, 0xc6, 0xcc, 0x31,
	0x71, 0x84, 0xfe, 0x03, 0xc5, 0x92, 0x9f, 0x42, 0x45, 0x71, 0x5d, 0x2d, 0xae, 0x86, 0xb9, 0x69,
	0xcc, 0xd0, 0x92, 0x78, 0xec, 0x60, 0x21, 0xff, 0x2d, 0xc1, 0xfe, 0x7b, 0xc3, 0xf4, 0xd1, 0x45,
	0xfa, 0xb0, 0xc5, 0x1e, 0x01, 0x5c, 0x1a, 0x68, 0xd2, 0x0f, 0x16, 0xc5, 0x6b, 0xae, 0xb1, 0x4d,
	0x55, 0xb0, 0x30, 0x81, 0xf1, 0xd5, 0xef, 0x9a, 0x39, 0x47, 0xaf, 0xb5, 0xc1, 0xb3, 0x12, 0x4d,
	0xb2, 0x0e, 0xb5, 0xdf, 0x3c, 0x74, 0x55, 0xdb, 0x2c, 0xa0, 0x18, 0x02, 0x1b, 0x73, 0x2f, 0x6c,
	0xc6, 0xb2, 0xca, 0x9f, 0x99, 0xcd, 0xb5, 0x4d, 0x0c, 0x05, 0xcf, 0x9f, 0xe5, 0x2f, 0x50, 0xbf,
	0x40, 0x77, 0x66, 0x78, 0x9e, 0x61, 0x5b, 0x0f, 0x13, 0xe6, 0x08, 0xc0, 0x89, 0x29, 0xc3, 0xa3,
	0x16, 0x2c, 0xf2, 0x19, 0xd4, 0xf8, 0xd1, 0xf4, 0x4f, 0xe3, 0xc3, 0x79, 0x0a, 0x25, 0xda, 0xe7,
	0x27, 0xb3, 0xdd, 0xdf, 0xef, 0x39, 0xd3, 0x5e, 0xca, 0xa1, 0x47, 0xd5, 0x12, 0xed, 0xb7, 0xf7,
	0x40, 0xa2, 0xa4, 0x0a, 0x25, 0x7a, 0x1c, 0x9e, 0x62, 0x89, 0x1e, 0xf7, 0xff, 0x3d, 0x84, 0xad,
	0x77, 0x7c, 0x92, 0x91, 0xb7, 0xb0, 0x2d, 0xcc, 0x18, 0xd2, 0x64, 0x4c, 0x77, 0x07, 0x5a, 0xfb,
	0xe0, 0x8e, 0x3d, 0x54, 0xfc, 0x1a, 0x39, 0x01, 0xb8, 0x6d, 0x6a, 0xb2, 0x1f, 0x3a, 0x26, 0x67,
	0x50, 0xbb, 0x99, 0x36, 0xc7, 0xf0, 0x63, 0x78, 0x14, 0x92, 0x12, 0xc2, 0x9c, 0x92, 0x0d, 0xdf,
	0xde, 0x65, 0x36, 0xb1, 0x61, 0xe5, 0x35, 0xf2, 0x0c, 0xe0, 0x57, 0x5b, 0x0b, 0xc5, 0x47, 0xb8,
	0x87, 0xd8, 0xb0, 0xed, 0xba, 0x60, 0x11, 0x41, 0x13, 0xed, 0x2b, 0xe6, 0x03, 0xf5, 0xa1, 0xac,
	0xd0, 0x28, 0x10, 0xf7, 0x48, 0x28, 0x7e, 0x61, 0x76, 0x2f, 0xa1, 0xaa, 0x50, 0xca, 0xe6, 0x66,
	0x4e, 0xe0, 0x0b, 0xd8, 0x51, 0x71, 0x66, 0xc7, 0x39, 0x2e, 0x09, 0x7b, 0x05, 0xf5, 0x00, 0x56,
	0x20, 0xe4, 0x10, 0x1a, 0x01, 0x36, 0xd9, 0xd0, 0xe4, 0x90, 0xf9, 0x2e, 0x6c, 0xf2, 0x85, 0x34,
	0x1f, 0xe1, 0x30, 0x49, 0x23, 0xa6, 0x92, 0x93, 0xeb, 0x39, 0x94, 0x47, 0xe8, 0x67, 0x1e, 0xd3,
	0xde, 0x02, 0xa9, 0xf3, 0x4d, 0xa8, 0x8e, 0xd0, 0xbf, 0x67, 0x07, 0x32, 0xb0, 0x43, 0xa8, 0x8f,
	0xd0, 0x5f, 0x7e, 0x07, 0x32, 0x68, 0x3e, 0x42, 0x53, 0xa0, 0x59, 0x72, 0x07, 0x32, 0xcb, 0xa9,
	0x2b, 0x94, 0x8e, 0x5c, 0x7b, 0xee, 0x18, 0xd6, 0x55, 0xbe, 0x33, 0x7d, 0x03, 0xcd, 0x48, 0x7f,
	0xc5, 0x08, 0x4e, 0x22, 0x51, 0x14, 0x83, 0x0f, 0x22, 0x31, 0xac, 0x90, 0xc2, 0x19, 0x3c, 0x49,
	0x0a, 0x2a, 0x45, 0x93, 0x53, 0x53, 0x2a, 0xfc, 0x7f, 0x81, 0x3e, 0x57, 0xe3, 0x7c, 0xcd, 0x55,
	0x93, 0xe2, 0x58, 0x5a, 0xaf, 0x03, 0x2e, 0x96, 0x25, 0x77, 0x28, 0x83, 0xe3, 0x0c, 0x0e, 0x05,
	0xc1, 0x2d, 0x5f, 0x4d, 0x06, 0x9d, 0x0a, 0x47, 0x69, 0xfd, 0xae, 0xcc, 0xf9, 0x92, 0xb7, 0xa5,
	0x62, 0x9a, 0x93, 0xf9, 0xf4, 0x2f, 0xd4, 0x7d, 0x2f, 0x6b, 0xf0, 0x26, 0x2e, 0x1e, 0xf2, 0x1a,
	0x79, 0x0b, 0x7b, 0x01, 0x90, 0xe7, 0x11, 0xa3, 0x1b, 0xcc, 0x37, 0x7d, 0xf1, 0x59, 0xcc, 0xf0,
	0x13, 0x54, 0x02, 0x86, 0x4f, 0xf9, 0x22, 0xbf, 0x01, 0x22, 0x44, 0xfe, 0xb4, 0x42, 0x60, 0x45,
	0xf7, 0x0d, 0xdb, 0x2a, 0x18, 0x38, 0x02, 0xe7, 0x08, 0xfc, 0x1c, 0xb6, 0x03, 0x02, 0x76, 0xfd,
	0x59, 0x3a, 0xec, 0x09, 0xec, 0x0a, 0x61, 0x03, 0x68, 0x8e, 0xa0, 0x7d, 0x28, 0x8f, 0x35, 0x2f,
	0xf7, 0x1b, 0x72, 0xac, 0x79, 0x05, 0x5e, 0x57, 0xaf, 0xa0, 0x3e, 0xd6, 0xbc, 0xc2, 0x63, 0x31,
	0x0a, 0x5a, 0x8c, 0xe0, 0x67, 0x9e, 0x35, 0xdb, 0xa0, 0xf7, 0xb6, 0xcb, 0x6e, 0x99, 0x84, 0x8b,
	0x3e, 0x75, 0xdf, 0xcc, 0x82, 0x2a, 0x94, 0x16, 0x82, 0xbe, 0x86, 0xfa, 0x29, 0x9a, 0xe8, 0x63,
	0x21, 0xf4, 0x09, 0x90, 0x5b, 0xb4, 0x97, 0x1b, 0xfe, 0x02, 0x20, 0x80, 0x17, 0x84, 0x31, 0xc7,
	0xe5, 0x61, 0xbf, 0x40, 0x8d, 0xa9, 0xed, 0xde, 0x4c, 0x17, 0xea, 0xf0, 0x1d, 0x1c, 0x8c, 0xd0,
	0xff, 0x30, 0x73, 0x4c, 0x43, 0x37, 0x8a, 0x92, 0x04, 0x19, 0x30, 0x57, 0x06, 0xce, 0xce, 0x3e,
	0xab, 0x91, 0x82, 0xaa, 0x6f, 0x3f, 0x0e, 0x82, 0xdb, 0xf0, 0x9d, 0x8f, 0x85, 0x85, 0xd5, 0x2b,
	0xd0, 0x60, 0x57, 0xcd, 0xd8, 0x37, 0xca, 0x3e, 0x07, 0xc5, 0x29, 0x1c, 0xa4, 0x33, 0x28, 0xc0,
	0x32, 0x84, 0x7d, 0x76, 0x01, 0x8b, 0x7d, 0xbd, 0x7b, 0x38, 0x32, 0xdf, 0x4e, 0xff, 0x13, 0x0e,
	0x64, 0x65, 0x3a, 0x05, 0x1a, 0x6c, 0xce, 0xac, 0x50, 0xd8, 0xe0, 0x07, 0x68, 0x1a, 0x76, 0xef,
	0xca, 0x75, 0xf4, 0x1e, 0x5e, 0x6b, 0x6c, 0xb8, 0x79, 0xc1, 0x8f, 0x9c, 0xc1, 0x76, 0xf0, 0x31,
	0x74, 0xc1, 0x16, 0x17, 0xd2, 0x74, 0x8b, 0x5b, 0x9f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xca,
	0xe0, 0x7c, 0x86, 0xee, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CasbinClient is the client API for Casbin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CasbinClient interface {
	NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerResponse, error)
	NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterResponse, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	HasRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	AddRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeleteRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetImplicitRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	GetUsersForRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error)
	DeletePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	AddPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	DeletePermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	GetPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	GetImplicitPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DResponse, error)
	HasPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type casbinClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinClient(cc grpc.ClientConnInterface) CasbinClient {
	return &casbinClient{cc}
}

func (c *casbinClient) NewEnforcer(ctx context.Context, in *NewEnforcerRequest, opts ...grpc.CallOption) (*NewEnforcerResponse, error) {
	out := new(NewEnforcerResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/NewEnforcer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) NewAdapter(ctx context.Context, in *NewAdapterRequest, opts ...grpc.CallOption) (*NewAdapterResponse, error) {
	out := new(NewAdapterResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/NewAdapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) LoadPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/LoadPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/SavePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetFilteredPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredNamedPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetFilteredNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/RemoveFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetGroupingPolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetFilteredGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetFilteredNamedGroupingPolicy(ctx context.Context, in *FilteredPolicyRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetFilteredNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllSubjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedSubjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllNamedSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllObjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedObjects(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllNamedObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllActions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedActions(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllNamedActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetAllNamedRoles(ctx context.Context, in *SimpleGetRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetAllNamedRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasNamedPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasNamedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasNamedGroupingPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasNamedGroupingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeleteRoleForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeleteRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeleteRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeleteUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeleteRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetImplicitRolesForUser(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetImplicitRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersForRole(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*ArrayResponse, error) {
	out := new(ArrayResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetUsersForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeletePermission(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/AddPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) DeletePermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/DeletePermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetImplicitPermissionsForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*Array2DResponse, error) {
	out := new(Array2DResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/GetImplicitPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) HasPermissionForUser(ctx context.Context, in *PermissionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.Casbin/HasPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinServer is the server API for Casbin service.
type CasbinServer interface {
	NewEnforcer(context.Context, *NewEnforcerRequest) (*NewEnforcerResponse, error)
	NewAdapter(context.Context, *NewAdapterRequest) (*NewAdapterResponse, error)
	Enforce(context.Context, *EnforceRequest) (*BoolResponse, error)
	LoadPolicy(context.Context, *EmptyRequest) (*EmptyResponse, error)
	SavePolicy(context.Context, *EmptyRequest) (*EmptyResponse, error)
	AddPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	AddNamedPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemovePolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemoveNamedPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest) (*BoolResponse, error)
	RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*BoolResponse, error)
	GetPolicy(context.Context, *EmptyRequest) (*Array2DResponse, error)
	GetNamedPolicy(context.Context, *PolicyRequest) (*Array2DResponse, error)
	GetFilteredPolicy(context.Context, *FilteredPolicyRequest) (*Array2DResponse, error)
	GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest) (*Array2DResponse, error)
	AddGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	AddNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemoveGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemoveNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolResponse, error)
	RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*BoolResponse, error)
	GetGroupingPolicy(context.Context, *EmptyRequest) (*Array2DResponse, error)
	GetNamedGroupingPolicy(context.Context, *PolicyRequest) (*Array2DResponse, error)
	GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DResponse, error)
	GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest) (*Array2DResponse, error)
	GetAllSubjects(context.Context, *EmptyRequest) (*ArrayResponse, error)
	GetAllNamedSubjects(context.Context, *SimpleGetRequest) (*ArrayResponse, error)
	GetAllObjects(context.Context, *EmptyRequest) (*ArrayResponse, error)
	GetAllNamedObjects(context.Context, *SimpleGetRequest) (*ArrayResponse, error)
	GetAllActions(context.Context, *EmptyRequest) (*ArrayResponse, error)
	GetAllNamedActions(context.Context, *SimpleGetRequest) (*ArrayResponse, error)
	GetAllRoles(context.Context, *EmptyRequest) (*ArrayResponse, error)
	GetAllNamedRoles(context.Context, *SimpleGetRequest) (*ArrayResponse, error)
	HasPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	HasNamedPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	HasGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	HasNamedGroupingPolicy(context.Context, *PolicyRequest) (*BoolResponse, error)
	HasRoleForUser(context.Context, *UserRoleRequest) (*BoolResponse, error)
	AddRoleForUser(context.Context, *UserRoleRequest) (*BoolResponse, error)
	DeleteRoleForUser(context.Context, *UserRoleRequest) (*BoolResponse, error)
	DeleteRolesForUser(context.Context, *UserRoleRequest) (*BoolResponse, error)
	DeleteUser(context.Context, *UserRoleRequest) (*BoolResponse, error)
	DeleteRole(context.Context, *UserRoleRequest) (*BoolResponse, error)
	GetRolesForUser(context.Context, *UserRoleRequest) (*ArrayResponse, error)
	GetImplicitRolesForUser(context.Context, *UserRoleRequest) (*ArrayResponse, error)
	GetUsersForRole(context.Context, *UserRoleRequest) (*ArrayResponse, error)
	DeletePermission(context.Context, *PermissionRequest) (*BoolResponse, error)
	AddPermissionForUser(context.Context, *PermissionRequest) (*BoolResponse, error)
	DeletePermissionForUser(context.Context, *PermissionRequest) (*BoolResponse, error)
	GetPermissionsForUser(context.Context, *PermissionRequest) (*Array2DResponse, error)
	GetImplicitPermissionsForUser(context.Context, *PermissionRequest) (*Array2DResponse, error)
	HasPermissionForUser(context.Context, *PermissionRequest) (*BoolResponse, error)
}

// UnimplementedCasbinServer can be embedded to have forward compatible implementations.
type UnimplementedCasbinServer struct {
}

func (*UnimplementedCasbinServer) NewEnforcer(ctx context.Context, req *NewEnforcerRequest) (*NewEnforcerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEnforcer not implemented")
}
func (*UnimplementedCasbinServer) NewAdapter(ctx context.Context, req *NewAdapterRequest) (*NewAdapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAdapter not implemented")
}
func (*UnimplementedCasbinServer) Enforce(ctx context.Context, req *EnforceRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (*UnimplementedCasbinServer) LoadPolicy(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPolicy not implemented")
}
func (*UnimplementedCasbinServer) SavePolicy(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePolicy not implemented")
}
func (*UnimplementedCasbinServer) AddPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (*UnimplementedCasbinServer) AddNamedPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemovePolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveNamedPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetPolicy(ctx context.Context, req *EmptyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetNamedPolicy(ctx context.Context, req *PolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) AddGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) AddNamedGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveNamedGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) RemoveFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFilteredNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetGroupingPolicy(ctx context.Context, req *EmptyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetNamedGroupingPolicy(ctx context.Context, req *PolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) GetAllSubjects(ctx context.Context, req *EmptyRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubjects not implemented")
}
func (*UnimplementedCasbinServer) GetAllNamedSubjects(ctx context.Context, req *SimpleGetRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedSubjects not implemented")
}
func (*UnimplementedCasbinServer) GetAllObjects(ctx context.Context, req *EmptyRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllObjects not implemented")
}
func (*UnimplementedCasbinServer) GetAllNamedObjects(ctx context.Context, req *SimpleGetRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedObjects not implemented")
}
func (*UnimplementedCasbinServer) GetAllActions(ctx context.Context, req *EmptyRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (*UnimplementedCasbinServer) GetAllNamedActions(ctx context.Context, req *SimpleGetRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedActions not implemented")
}
func (*UnimplementedCasbinServer) GetAllRoles(ctx context.Context, req *EmptyRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (*UnimplementedCasbinServer) GetAllNamedRoles(ctx context.Context, req *SimpleGetRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedRoles not implemented")
}
func (*UnimplementedCasbinServer) HasPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPolicy not implemented")
}
func (*UnimplementedCasbinServer) HasNamedPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedPolicy not implemented")
}
func (*UnimplementedCasbinServer) HasGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) HasNamedGroupingPolicy(ctx context.Context, req *PolicyRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasNamedGroupingPolicy not implemented")
}
func (*UnimplementedCasbinServer) HasRoleForUser(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRoleForUser not implemented")
}
func (*UnimplementedCasbinServer) AddRoleForUser(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (*UnimplementedCasbinServer) DeleteRoleForUser(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (*UnimplementedCasbinServer) DeleteRolesForUser(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (*UnimplementedCasbinServer) DeleteUser(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedCasbinServer) DeleteRole(ctx context.Context, req *UserRoleRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedCasbinServer) GetRolesForUser(ctx context.Context, req *UserRoleRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (*UnimplementedCasbinServer) GetImplicitRolesForUser(ctx context.Context, req *UserRoleRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplicitRolesForUser not implemented")
}
func (*UnimplementedCasbinServer) GetUsersForRole(ctx context.Context, req *UserRoleRequest) (*ArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (*UnimplementedCasbinServer) DeletePermission(ctx context.Context, req *PermissionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (*UnimplementedCasbinServer) AddPermissionForUser(ctx context.Context, req *PermissionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForUser not implemented")
}
func (*UnimplementedCasbinServer) DeletePermissionForUser(ctx context.Context, req *PermissionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForUser not implemented")
}
func (*UnimplementedCasbinServer) GetPermissionsForUser(ctx context.Context, req *PermissionRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUser not implemented")
}
func (*UnimplementedCasbinServer) GetImplicitPermissionsForUser(ctx context.Context, req *PermissionRequest) (*Array2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplicitPermissionsForUser not implemented")
}
func (*UnimplementedCasbinServer) HasPermissionForUser(ctx context.Context, req *PermissionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermissionForUser not implemented")
}

func RegisterCasbinServer(s *grpc.Server, srv CasbinServer) {
	s.RegisterService(&_Casbin_serviceDesc, srv)
}

func _Casbin_NewEnforcer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEnforcerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).NewEnforcer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/NewEnforcer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).NewEnforcer(ctx, req.(*NewEnforcerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_NewAdapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAdapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).NewAdapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/NewAdapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).NewAdapter(ctx, req.(*NewAdapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_LoadPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).LoadPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/LoadPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).LoadPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/SavePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).SavePolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetFilteredPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetFilteredNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredNamedPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/RemoveFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetGroupingPolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetFilteredGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetFilteredNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilteredPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetFilteredNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetFilteredNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetFilteredNamedGroupingPolicy(ctx, req.(*FilteredPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllSubjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllNamedSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedSubjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllObjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllNamedObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedObjects(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllActions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllNamedActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedActions(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllRoles(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetAllNamedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetAllNamedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetAllNamedRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetAllNamedRoles(ctx, req.(*SimpleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasNamedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasNamedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasNamedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasNamedPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasNamedGroupingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasNamedGroupingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasNamedGroupingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasNamedGroupingPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeleteRoleForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeleteRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeleteRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeleteUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeleteRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetImplicitRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetImplicitRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetImplicitRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetImplicitRolesForUser(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetUsersForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersForRole(ctx, req.(*UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeletePermission(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/AddPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_DeletePermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).DeletePermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/DeletePermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).DeletePermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionsForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetImplicitPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetImplicitPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/GetImplicitPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetImplicitPermissionsForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_HasPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).HasPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Casbin/HasPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).HasPermissionForUser(ctx, req.(*PermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Casbin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Casbin",
	HandlerType: (*CasbinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEnforcer",
			Handler:    _Casbin_NewEnforcer_Handler,
		},
		{
			MethodName: "NewAdapter",
			Handler:    _Casbin_NewAdapter_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _Casbin_Enforce_Handler,
		},
		{
			MethodName: "LoadPolicy",
			Handler:    _Casbin_LoadPolicy_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _Casbin_SavePolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _Casbin_AddPolicy_Handler,
		},
		{
			MethodName: "AddNamedPolicy",
			Handler:    _Casbin_AddNamedPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _Casbin_RemovePolicy_Handler,
		},
		{
			MethodName: "RemoveNamedPolicy",
			Handler:    _Casbin_RemoveNamedPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredPolicy",
			Handler:    _Casbin_RemoveFilteredPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedPolicy",
			Handler:    _Casbin_RemoveFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Casbin_GetPolicy_Handler,
		},
		{
			MethodName: "GetNamedPolicy",
			Handler:    _Casbin_GetNamedPolicy_Handler,
		},
		{
			MethodName: "GetFilteredPolicy",
			Handler:    _Casbin_GetFilteredPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedPolicy",
			Handler:    _Casbin_GetFilteredNamedPolicy_Handler,
		},
		{
			MethodName: "AddGroupingPolicy",
			Handler:    _Casbin_AddGroupingPolicy_Handler,
		},
		{
			MethodName: "AddNamedGroupingPolicy",
			Handler:    _Casbin_AddNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicy",
			Handler:    _Casbin_RemoveGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveNamedGroupingPolicy",
			Handler:    _Casbin_RemoveNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredGroupingPolicy",
			Handler:    _Casbin_RemoveFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "RemoveFilteredNamedGroupingPolicy",
			Handler:    _Casbin_RemoveFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetGroupingPolicy",
			Handler:    _Casbin_GetGroupingPolicy_Handler,
		},
		{
			MethodName: "GetNamedGroupingPolicy",
			Handler:    _Casbin_GetNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredGroupingPolicy",
			Handler:    _Casbin_GetFilteredGroupingPolicy_Handler,
		},
		{
			MethodName: "GetFilteredNamedGroupingPolicy",
			Handler:    _Casbin_GetFilteredNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "GetAllSubjects",
			Handler:    _Casbin_GetAllSubjects_Handler,
		},
		{
			MethodName: "GetAllNamedSubjects",
			Handler:    _Casbin_GetAllNamedSubjects_Handler,
		},
		{
			MethodName: "GetAllObjects",
			Handler:    _Casbin_GetAllObjects_Handler,
		},
		{
			MethodName: "GetAllNamedObjects",
			Handler:    _Casbin_GetAllNamedObjects_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _Casbin_GetAllActions_Handler,
		},
		{
			MethodName: "GetAllNamedActions",
			Handler:    _Casbin_GetAllNamedActions_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _Casbin_GetAllRoles_Handler,
		},
		{
			MethodName: "GetAllNamedRoles",
			Handler:    _Casbin_GetAllNamedRoles_Handler,
		},
		{
			MethodName: "HasPolicy",
			Handler:    _Casbin_HasPolicy_Handler,
		},
		{
			MethodName: "HasNamedPolicy",
			Handler:    _Casbin_HasNamedPolicy_Handler,
		},
		{
			MethodName: "HasGroupingPolicy",
			Handler:    _Casbin_HasGroupingPolicy_Handler,
		},
		{
			MethodName: "HasNamedGroupingPolicy",
			Handler:    _Casbin_HasNamedGroupingPolicy_Handler,
		},
		{
			MethodName: "HasRoleForUser",
			Handler:    _Casbin_HasRoleForUser_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _Casbin_AddRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _Casbin_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _Casbin_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Casbin_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Casbin_DeleteRole_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _Casbin_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetImplicitRolesForUser",
			Handler:    _Casbin_GetImplicitRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _Casbin_GetUsersForRole_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Casbin_DeletePermission_Handler,
		},
		{
			MethodName: "AddPermissionForUser",
			Handler:    _Casbin_AddPermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForUser",
			Handler:    _Casbin_DeletePermissionForUser_Handler,
		},
		{
			MethodName: "GetPermissionsForUser",
			Handler:    _Casbin_GetPermissionsForUser_Handler,
		},
		{
			MethodName: "GetImplicitPermissionsForUser",
			Handler:    _Casbin_GetImplicitPermissionsForUser_Handler,
		},
		{
			MethodName: "HasPermissionForUser",
			Handler:    _Casbin_HasPermissionForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casbin.proto",
}
